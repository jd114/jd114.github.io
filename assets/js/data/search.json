[ { "title": "Command Injection Guide", "url": "/posts/Command-Injection-Guide/", "categories": "Bug Bounty, Command Injection", "tags": "command Injection, bugbounty", "date": "2022-08-22 06:56:55 +0530", "snippet": " What is Command Injection? Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.Attacker pass the bad data to the system shell through forms, cookies, and HTTP headers. This allows the attackers to gain control over a web site and carry out any action or process that the underlying application accommodates.They typically use an input mechanism like HTML code, cookies or form fields to inject this command into the application. Vulnerabilities That Can Lead to Command Injection Arbitrary Command Injection Arbitrary command injection happens when a user can submit a malicious command into an application that has the ability to run any command on the underlying host. This kind of attack might enable the attacker to obtain private information. Arbitrary File Uploads Whenever users are given the option to upload files with any file extension, command injection can happen if the files are kept in the site root. Server-Side Template Injection(SSTI) An attacker can inject a malicious payload into a template using native template syntax and then the template is run server-side. This is known as server-side template injection. Insecure Serialization Improper deserialization can be leveraged to execute arbitrary commands. This is because the user-supplied serialised data is deserialized by the server-side code without being verified. XML external entity injection (XXE) If an application uses an XML parser that hasn’t been configured properly to parse user XML input, this can lead to Denial of Service (DoS) attacks, Server-Side Request Forgery (SSRF), and breaches to vulnerable data How you can detect command injection attacks " }, { "title": "Cookies and Session Management Guide you ever need Part - 1", "url": "/posts/Cookie-Guide-You-Ever-Need/", "categories": "Bug Bounty, Cookie", "tags": "cookies, bugbounty", "date": "2022-08-07 06:56:55 +0530", "snippet": "Before we get into the details of the session management vulnerabilities, let’s first go over the fundamentals, such as what cookies,session, use, and attributes are.Let's talk about cookies!!What are Cookies?Cookies are tiny data files generated by a web server and sent to a web browser. For the duration of a user’s session on a website, or for a predetermined amount of time, web browsers keep the cookies they receive. Any further queries the user makes to the web server are then associated with the pertinent cookies.What are cookies used for? User sessions Personalization Tracking what are the types of cookie Session CookiesTemporary cookies or session cookies are used by websites to identify users and the data they provide while navigating the site. For the duration that a person is on a website, session cookies simply keep track of their activity. The cookies are removed when the web browser is closed. These are frequently utilised on e-commerce and shopping websites. Persistent cookiesUnlike session cookies, persistent cookies are stored in a user’s browser for an extended period of time, which could be a day, a week, many months, or even years. An expiration date is always present in persistent cookies.In Chrome Developer Tools Menu, persistent cookies have an expiration date, whereas session cookies are marked as ‘session’. Zombie cookies Zombie cookies are exactly what they sound like – cookies that come back to life after you thought they were gone. You may have seen them referred to as “Evercookies,” which are unfortunately not the cookie equivalent of a Wonka everlasting gobstopper. Zombie cookies don’t get cleared because they’re hiding outside of your regular cookie storage. Local storage is a prime target (Adobe Flash and Microsoft Silverlight use this a lot), and some HTML5 storage can also be an issue. The living dead cookies can even be in your web history or in RGB color codes that your browser allows into its cache. All a website has to do is find one of the hidden cookies and it can resurrect the others.Cookies AttributesIn order to protect cookie data, the industry has developed means to assist lock down these cookies and reduce their attack surface. Cookies have evolved into a preferred method of storage for online applications because of their high levels of usability and security.The means to protect the cookies are:Cookie AttributesCookie Prefixes Secure Attribute The Secure attribute instructs the browser to only deliver the cookie if the request is being sent over a secure channel, such as HTTPS. This will lessen the risk of the cookie being sent in an unencrypted request. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests. HttpOnly Attribute The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client side script such as JavaScript. This doesn’t limit the whole attack surface of XSS attacks, as an attacker could still send request in place of the user, but limits immensely the reach of XSS attack vectors. Example: Here is an example of how cookies (which are not using HttpOnly flag) can be easily stolen in a website displaying comments: A field named comment is sent to the server and saved in the database. When the comments page is loaded, this comment is fetched from db and assigned to a div by innerHtml : document.getElementById(\"commentDiv\").innerHTML = commentFromDbVar; An attacker writes a comment that contains a malicious script which sends all current user cookies to an endpoint (script executes each time comments are loaded) Domain Attribute The Domain attribute is used to compare the cookie’s domain against the domain of the server for which the HTTP request is being made. If the domain matches or if it is a subdomain, then the path attribute will be checked next.Example: Path Attribute Verify that the path attribute, just as the Domain attribute, has not been set too loosely. Even if the Domain attribute has been configured as tight as possible, if the path is set to the root directory “/” then it can be vulnerable to less secure applications on the same server. For example, if the application resides at /myapp/, then verify that the cookies path is set to “; path=/myapp/” and NOT “; path=/” or “; path=/myapp”. Notice here that the trailing “/” must be used after myapp. If it is not used, the browser will send the cookie to any path that matches “myapp” such as “myapp-exploited”. Expires Attribute This attribute is used to set persistent cookies, since the cookie does not expire until the set date is exceeded. This persistent cookie will be used by this browser session and subsequent sessions until the cookie expires. Once the expiration date has exceeded, the browser will delete the cookie. Alternatively, if this attribute is not set, then the cookie is only valid in the current browser session and the cookie will be deleted when the session ends. For example, if a cookie is set to\"; expires=Sun, 21-Aug-2022 15:45:29 IST\"and it is currently August 20th 2022, then the tester should inspect the cookie. If the cookie is a session token that is stored on the user’s hard drive then an attacker or local user (such as an admin) who has access to this cookie can access the application by resubmitting this token until the expiration date passes. SameSite Attribute The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-origin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks. This attribute can be configured in three different modes: ● Strict ● Lax ● None Strict Value The Strict value is the most restrictive usage of SameSite, allowing the browser to send the cookie only to first-party context without top-level navigation. In other words, the data associated with the cookie will only be sent on requests matching the current site shown on the browser URL bar. The cookie will not be sent on requests generated by third-party websites. This value is especially recommended for actions performed at the same domain. However, it can have some limitations with some session management systems negatively affecting the user navigation experience. Since the browser would not send the cookie on any requests generated from a third-party domain or email, the user would be required to sign in again even if they already have an authenticated session. Lax Value The Laxvalue is less restrictive than Strict. The cookie will be sent if the URL equals the cookie’s domain (first-party) even if the link is coming from a third-party domain. This value is considered by most browsers the default behavior since it provides a better user experience than the Strict value. It doesn’t trigger for assets, such as images, where cookies might not be needed to access them. None Value The None value specifies that the browser will send the cookie on cross-site requests (the normal behavior before the implementation of SameSite) only if the Secure attribute is also used, e.g. SameSite=None; Secure. It is a recommended value, instead of not specifying any SameSite value, as it forces the use of the secure attribute. Httpflag Bypass⏺️ This could be Bypassed with TRACE HTTP requests as the response from the server (if this HTTP method is available) will reflect the cookies sent. This technique is called Cross-Site Tracking.⏺️ It’s possible to overwrite HttpOnly cookies by performing a Cookie Jar overflow attack" }, { "title": "Blockchain Fundamentals P-1", "url": "/posts/Basics-of-Blockchain/", "categories": "Blockchain, Basics", "tags": "blockchain", "date": "2022-06-20 06:56:55 +0530", "snippet": "Hey everyone, In this blog we are going to learn about basic fundamentals of the blockchain Now days we daily heared about blockchain and blockchain security metaverse etc so basically what is blockchain ?Blockchain means a distributed ledger that records transactions between parties in a verifiable and permanent way.Some terms we heared whenever someone speaks about the blockchains are :- ● Distributed Ledger: Ledger meaning A sequential log or each transactions A distributed ledger is a database that is consensually shared and synchronized across multiple sites, institutions, or geographies, accessible by multiple people. It allows transactions to have public “witnesses.” The participant at each node of the network can access the recordings shared across that network and can own an identical copy of it. Any changes or additions made to the ledger are reflected and copied to all participants in a matter of seconds or minutes. ● Transactions: Destination receives something of value, such as a currency Transactions are data structures that encode the transfer of value between participants in the bitcoin system.More Information regarding Transactions:- https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch05.html#:~:text=Transactions%20are%20data%20structures%20that,global%20double%2Dentry%20bookkeeping%20ledger. ● Block: Blocks are data structures within the blockchain database, where transaction data in a cryptocurrency blockchain are permanently recorded.More Information Regarding Block how Blockchain Block works:- https://www.investopedia.com/terms/b/block-bitcoin-block.asp ● Hash: Hash is Algorithm which convert variable length of data into fix length of alpha numeric.Bitcoin uses SHA-256 and RIPEMD160 whereas Ethereum uses the Keccak-256 hash function. ● Governance: Different blockchains have different governance mechanisms. However, public blockchains typically have an “open” governance mechanism, allowing users and nodes to have input. In the case of a dispute, nodes can reject decisions by refusing to update to follow a “fork” in the blockchain software that implements the blockchain protocols.Peer-to-PeerPeer-to-Peer is a distributed networking or computing architecture that divides tasks or workloads across several computer systems (each one acting as an individual peer). P2P networks can be used to share any kind of digital data, including cryptocurrencies.P2P exchanges allow the participants of the market to trade directly with each other without any trusted third party to process all trades.‘Regular’ cryptocurrency exchanges are companies, which serve as intermediaries between their customers and make a profit by collecting fees. Conversely, the interactions between counterparties on peer-to-peer exchanges are directed exclusively by pre-programmed software, with no requirement for human middlemen." }, { "title": "Bypass Email Confirmation", "url": "/posts/Bypass-email-confirmation/", "categories": "Bug Bounty, Bypass", "tags": "emailbypass, bugbounty", "date": "2022-06-16 06:56:55 +0530", "snippet": "Hello everyone. In this blog, I will share my finding on How I was able to bypass the email confirmation by just paying close observation to responses.This is my first write-up sharing, so if I make mistakes let me know :)everyone’s approach is different I will share my approach also in another blog so let’s start with how I was able to find the bypassI was hunting on a responsible disclosure program, let’s say http://example.com/ when you sign-up on that website you get the confirmation of phone number first and then the email confirmation without any confirmation you are not allowed to access the websiteso first I entered my mobile number and enter the correct OTP and capture the response of that particular request It was something like:-As you can see there’s the resetlink that caught my attention and I note down the response in notepad so next step is confirmation of the email I was checking the confirmation link and I copy that link and paste it into the notepad and it was likehttps://xyz.example.com/rp/1254545454545454545454Same as the Resetlink so I just copied the URL and paste and recheck both resetlink and confirmation links are the same or not and they were the same so that’s how I have bypassed the confirmation of the email address easy isn’t it! I was able to bypass email confirmation without changing the response code or anything just by the observationTIP:- Always try to create two accounts or try to check the first correct response note it down to notepad and next time enter the wrong details and check the outputs and responses.UpdateCompany Accepted the bug and resolve the issue Reward:- Amazon Pay eGift Cards" } ]
